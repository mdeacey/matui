Menu = ReactBurguerMenu.push;

@DragDropContext(HTML5Backend)
class MainLayout extends React.Component{
  props = { 
    menuItems : null, 
    gridItems : null, 
    sideWidth : 285
  }
  
  
//------ constructor --------------

  constructor(props) {
    super(props);
    this.state = {
      menuItems : [
        { width: '250px', height: '100px', bgcolor: '#f76d3c' },
        { width: '200px', height: '50px', bgcolor: '#5481e6' },
        { width: '100px', height: '100px', bgcolor: '#98cb4a' },
        { width: '150px', height: '50px', bgcolor: '#913ccd' }
      ], 
      gridItems : [
        { i: 1, x: 0, y: 0, w: 3, h: 1, bgcolor:'#f76d3c' },
        { i: 2, x: 3, y: 0, w: 3, h: 1, bgcolor:'#5481e6' },
        { i: 3, x: 6, y: 0, w: 3, h: 1, bgcolor:'#98cb4a' }
      ], 
      gridItems : [], 
      draggable : false,
      dragged : 0
    };
  }
  
  
//----------------------- Event Handling -------------------------  

  componentDidMount() {
    document.addEventListener('mousedown', this.handleMouseDown.bind(this), false);
    document.addEventListener('mousemove', this.handleMouseMove.bind(this), false);
    document.addEventListener('mouseup', this.handleMouseUp.bind(this), false);
  }
  componentWillUnmount() {
    document.removeEventListener('mousemove', this.handleMouseMove.bind(this), false);
    document.removeEventListener('mouseup', this.handleMouseUp.bind(this), false);
  }

  onMenuDragStart(e) {
    this.setState({draggable:true});
    oldItems = this.refs.ReactGridLayout.state.layout;
    gridItems = this.state.gridItems;
    for (g in gridItems) {
      for (o in oldItems) {
        if (gridItems[g].i == oldItems[o].i) {
          gridItems[g].x = oldItems[o].x;
          gridItems[g].y = oldItems[o].y;
          gridItems[g].w = oldItems[o].w;
          gridItems[g].h = oldItems[o].h;
          break;
        }
      }
    }
    currDraggedMenuItem = gridItems.length + 1;
    gridItems[gridItems.length] = {
      i: currDraggedMenuItem, x: 0, y: 0, w: 3, h: 1, 
      bgcolor:e.target.style.backgroundColor
    };
    this.setState({
      gridItems : gridItems, 
      dragged : currDraggedMenuItem
    });
  }

  onMenuDragEnd (e) {
    this.setState({draggable : false, dragged : 0});
  }

  handleMouseDown (e) {
    //if (e.target.className == 'itembox') 
    this.setState({draggable:true})
  }
  handleMouseMove (e) {
    if (this.state.draggable) {
      X = Math.floor((e.clientX - 200) / (window.innerWidth / 12));
      if (X < 0) X = 0;
      Y = Math.floor((e.clientY - 50) / 70);
      if (Y < 0) Y = 0;
      console.log(X,Y)
      tempItems = this.refs.ReactGridLayout.state.layout;
      gridItems = this.state.gridItems;
      dragged = this.state.dragged;
      if (e.clientX > 0) {
        for (g in gridItems) {
          for (t in tempItems) {
            if (gridItems[g].i == tempItems[t].i) {
              gridItems[g].x = tempItems[t].x;
              gridItems[g].y = tempItems[t].y;
              gridItems[g].w = tempItems[t].w;
              gridItems[g].h = tempItems[t].h;
              break;
            }
          }
        }
        for (g in gridItems) {
          if (gridItems[g].i == dragged) {
            gridItems[g].x = X;
            gridItems[g].y = Y;
            break;
          }
        }
        this.setState({ gridItems : gridItems });
      }
    }
  }
  handleMouseUp (e) {
    this.setState({draggable : false, dragged : 0});
  }
  
  
//-------- Adding Items -----------------  

  addMenuItem(item){
    return (
      <MenuItem 
        ref="MenuItem" 
        className="itembox" 
        _width={item.width}
        _height={item.height}
        bgcolor={item.bgcolor} 
        onDragStart = {this.onMenuDragStart.bind(this)}
        onDragEnd = {this.onMenuDragEnd.bind(this)}
        onDrag = {this.handleMouseMove.bind(this)}
      />
    );
  }
  addGridItem(item){
    return (
      <div
        className = {item.i}
        key = {item.i} 
        _grid = {{x: item.x, y: item.y, w: item.w, h: item.h, _id: item._id}}
        style = {{backgroundColor:item.bgcolor}} className={item.i}>
          
      </div>
    )
  }

  
//------------- Rendering ------------------

  render() {
    return (
      <div>
        <Menu right width={this.props.sideWidth}>
          {_.map(this.state.menuItems, this.addMenuItem.bind(this))}
        </Menu>
        <div className="workshop">
          <div className="main-content container">
						<ReactGridLayout ref="ReactGridLayout" rowHeight={70}>
              {_.map(this.state.gridItems, this.addGridItem.bind(this))}
            </ReactGridLayout>
          </div>
        </div>
      </div>
    )
  }
}

this.MainLayout = MainLayout;
